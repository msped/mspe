name: CI/CD

on:
    push:
        branches: ["main", "production_staging"]
    pull_request:
        branches: ["main", "production_staging"]

jobs:
    CI:
        runs-on: ubuntu-latest
        environment: Django Test
        services:
            postgres:
                image: postgres:13
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_DB: postgres
                    POSTGRES_PASSWORD: postgres
                ports:
                    - 5433:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

        strategy:
            max-parallel: 4
            matrix:
                python-version: ["3.10"]

        steps:
            - uses: actions/checkout@v3
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v3
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
            - name: Run Tests
              env:
                  SECRET_KEY: ${{ secrets.SECRET_KEY }}
                  SERVER_IP: ${{ secrets.SERVER_IP }}
                  POSTGRES_POST: ${{ secrets.POSTGRES_PORT }}
                  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
              run: |
                  coverage run manage.py test && coverage report --fail-under=90

    CD:
        runs-on: ubuntu-latest
        if: ${{ github.ref == 'refs/heads/main' }}
        needs: CI
        environment: Production
        steps:
            - uses: actions/checkout@v3
            - name: Deploy
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  key: ${{ secrets.SSH_KEY }}
                  command_timeout: 200m
                  script: |
                      cd ${{ secrets.FILE_PATH }}
                      git pull
                      docker compose down
                      docker compose build --no-cache --compress
                      docker compose up -d
